<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on My New Hugo Site</title>
    <link>http://example.org/</link>
    <description>Recent content in Introduction on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>其他</title>
      <link>http://example.org/docs/%E5%85%B6%E4%BB%96/c%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%85%B6%E4%BB%96/c%E8%AF%AD%E8%A8%80/</guid>
      <description>SOP: 定义: standard operating procedure , 标准操作过程用来提升效率、提高产出
参考:https://en.wikipedia.org/wiki/Standard_operating_procedure
DAU
PV
UV
VV
WAU
SLA
QPS
TPS
PIP performance improvement protocol,绩效提升协议
普适性扩展
Humble 谦逊
BFF Backends for Frontends 的简写，为了前端的后端
WEB
APP
OPEN API
小程序</description>
    </item>
    
    <item>
      <title>分布式</title>
      <link>http://example.org/docs/%E5%88%86%E5%B8%83%E5%BC%8F/raft%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%88%86%E5%B8%83%E5%BC%8F/raft%E5%8D%8F%E8%AE%AE/</guid>
      <description>+++
raft 算法是 Multi-Paxos 的一个变种，其简化了 Multi-Paxos 的思想，变得更容易被理解以及工程实现，实际项目中可以优先考虑 Raft 算法
+++
1、拜占庭将军
假设多位拜占庭将军中没有叛军，信使的信息可靠但有可能被暗杀的情况下，将军们如何达成是否要进攻的一致性决定？
解决方案
举例如下：假如现在一共有 3 个将军 A，B 和 C，每个将军都有一个随机时间的倒计时器，倒计时一结束，这个将军就把自己当成大将军候选人，然后派信使传递选举投票的信息给将军 B 和 C，如果将军 B 和 C 还没有把自己当作候选人（自己的倒计时还没有结束），并且没有把选举票投给其他人，它们就会把票投给将军 A，信使回到将军 A 时，将军 A 知道自己收到了足够的票数，成为大将军。在有了大将军之后，是否需要进攻就由大将军 A 决定，然后再去派信使通知另外两个将军，自己已经成为了大将军。如果一段时间还没收到将军 B 和 C 的回复（信使可能会被暗杀），那就再重派一个信使，直到收到回复。 2、SOP(共识算法) # 共识算法
3 leader选举 # raft 使用心跳机制来触发 Leader 的选举。
如果一台服务器能够收到来自 Leader 或者 Candidate 的有效信息，那么它会一直保持为 Follower 状态，并且刷新自己的 electionElapsed，重新计时。
Leader 会向所有的 Follower 周期性发送心跳来保证自己的 Leader 地位。如果一个 Follower 在一个周期内没有收到心跳信息，就叫做选举超时，然后它就会认为此时没有可用的 Leader，并且开始进行一次选举以选出一个新的 Leader。
为了开始新的选举，Follower 会自增自己的 term 号并且转换状态为 Candidate。然后他会向所有节点发起 RequestVoteRPC 请求， Candidate 的状态会持续到以下情况发生：</description>
    </item>
    
    <item>
      <title>索引</title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E7%B4%A2%E5%BC%95/</guid>
      <description>索引覆盖
索引下推
当你的查询语句的执行计划里，出现了 Extra 为 Using index condition，那么说明使用了索引下推的优化。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/gmp%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/gmp%E6%A8%A1%E5%9E%8B/</guid>
      <description>G的大小: 2-4k
线程的大小 M?
1、我们通过 go func () 来创建一个 goroutine；
2、有两个存储 G 的队列，一个是局部调度器 P 的本地队列、一个是全局 G 队列。新创建的 G 会先保存在 P 的本地队列中，如果 P 的本地队列已经满了就会保存在全局的队列中；
3、G 只能运行在 M 中，一个 M 必须持有一个 P，M 与 P 是 1：1 的关系。M 会从 P 的本地队列弹出一个可执行状态的 G 来执行，如果 P 的本地队列为空，就会想其他的 MP 组合偷取一个可执行的 G 来执行；
4、一个 M 调度 G 执行的过程是一个循环机制；
5、当 M 执行某一个 G 时候如果发生了 syscall 或则其余阻塞操作，M 会阻塞，如果当前有一些 G 在执行，runtime 会把这个线程 M 从 P 中摘除 (detach)，然后再创建一个新的操作系统的线程 (如果有空闲的线程可用就复用空闲线程) 来服务于这个 P；</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/slice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/slice/</guid>
      <description>切片底层储存数组,
扩容机制
底层数据会随着扩容二进行扩容,回溯时用到数据要特别注意.
切片传参
copy(copyData,srcData)
https://leetcode.cn/problems/combination-sum-ii/submissions/</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/%E5%8F%8D%E5%B0%84/</guid>
      <description>1 反射使用 # 1.1 反射获取数据类型 # 通过relfect.TypeOf() 获取对应的类型,这个方法可以返回类型元数据信息,
Name方法返回类型对应的名字,如果是slice类型或者是指针类型,返回为空字符串 Kind方法对应的数据类型,int、string、struct、func,枚举值reflect.Kind类型 Size: 数据占用内存大小,单位字节 &amp;hellip; type Type interface { ... Name() string // 返回类型对应的名字 PkgPath() string // 类型所在路径 Kind() Kind // 类型元数据的所属类型,int32、float32、string、slice、map、struct、ptr... Elem() Type // 数组、切片、chan、map、指针类型存储的数据信息,其他类型会panic Field(i int) StructField // 返回sturct的某个字段元数据信息 ... } type Foo struct { Name string `tag1:&amp;#34;First Tag&amp;#34; tag2:&amp;#34;Second Tag&amp;#34;` Age int `json:&amp;#34;age&amp;#34;` } func main() { testCase := []interface{}{ 1, &amp;#34;1&amp;#34;, []string{&amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;}, map[int]int{1: 1, 2: 2}, Foo{ Name: &amp;#34;foo&amp;#34;, Age: 12, }, ioutil.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/java%E5%9F%BA%E7%A1%80/juc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/java%E5%9F%BA%E7%A1%80/juc/</guid>
      <description>juc并发编程
主要掌握以下几个类的使用方法:
CAS
public class Cas { public static void main(String[] args) { // 无法控制并发 AtomicInteger ai = new AtomicInteger(1); System.out.println(ai.compareAndSet(0, 2)); System.out.println(ai.compareAndSet(1, 2)); // Unsafe unsafe = Unsafe.getUnsafe(); } } ABA问题,, 1&amp;mdash; &amp;gt;2 &amp;mdash;&amp;mdash;&amp;gt;1 发生了改变, 但外部并不清楚这种改变
public static void main(String[] args) { // 无法控制并发 AtomicInteger ai = new AtomicInteger(1); System.out.println(ai.compareAndSet(0, 2)); System.out.println(ai.compareAndSet(1, 2)); // Unsafe unsafe = Unsafe.getUnsafe(); AtomicStampedReference atomicStampedReference = new AtomicStampedReference(2,3); System.out.println(atomicStampedReference.compareAndSet(2, 2, 3, 1)); System.out.println(atomicStampedReference.compareAndSet(2, 3, 3, 1)); } Atomic 类</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/java%E5%9F%BA%E7%A1%80/jvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/java%E5%9F%BA%E7%A1%80/jvm/</guid>
      <description>类加载机制 # GC策略 # 对象优先分配在eden区
大对象直接分配在老年代
长期存活的对象分配在老年代
进入survior 区 或者survior 每经历一次minor gc 年龄+1 累计年龄的对象数超过50% 默认年龄阈值15, cms默认6 取累计年龄和默认年龄的最小值 GC分类 # partial GC:
Young GC (Minor GC), 只收集young gen代的GC Old GC ,只收集Old gen的GC MixedGC 手机young gen和old gen 的GC, 只有G1支持这种模式 Full GC:
收集整个堆的数据,young gen、old gen、perm gen major gc 和full gc等价, 概念混乱,也有major gc和old gc等价的说法,
引用类型 # 强引用(Strong Reference)
弱引用(Weak Reference)
不管当前内存空间足够与否，都会回收它的内存,比Soft Reference 拥有更短的生命周期
软引用(Soft Reference)
内存空间不足时,进行回收
虚引用(Phantom Reference)
虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收
常量池 # 字符串常量池位于堆中
运行时常量池位于方法区(元空间)</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/java%E5%9F%BA%E7%A1%80/lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/java%E5%9F%BA%E7%A1%80/lambda/</guid>
      <description> Optional # Optional用法:
无法判断被调用传递过来的list 是否为空, 可以省略if null的判断条件
List&amp;lt;String&amp;gt; carsFiltered = Optional.ofNullable(cars) .orElseGet(Collections::emptyList) .stream() .filter(Objects::nonNull) //filtering car object that are null .map(Car::getName) //now it&amp;#39;s a stream of Strings .filter(Objects::nonNull) //filtering null in Strings .filter(name -&amp;gt; name.startsWith(&amp;#34;M&amp;#34;)) .collect(Collectors.toList()); //back to List of Strings </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/java%E5%9F%BA%E7%A1%80/skiplist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/java%E5%9F%BA%E7%A1%80/skiplist/</guid>
      <description>跳表</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/java%E5%9F%BA%E7%A1%80/volatile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/java%E5%9F%BA%E7%A1%80/volatile/</guid>
      <description>volatile用来保证变量可见性</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/java%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/java%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>Integer # Integer == int 整型会自动装箱与拆箱,
Integer m = 323; int n = 323; System.out.println(m == n); // true Interger == Integer 比较的时对象, -128-127 连接的是同一对象,其他的指向不同对象
Integer m = 323; Integer n = 323; System.out.println(m == n); // false String # 不可以变对象final
String 不可变性天生具备线程安全，可以在多个线程中安全地使用。
如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。
JDK版本 是否有永久代，字符串常量池放在哪里？ 方法区逻辑上规范，由哪些实际的部分实现的？ jdk1.6及之前 有永久代，运行时常量池（包括字符串常量池），静态变量存放在永久代上 这个时期方法区在HotSpot中是由永久代来实现的，以至于这个时期说方法区就是指永久代 jdk1.7 有永久代，但已经逐步“去永久代”，字符串常量池、静态变量移除，保存在堆中； 这个时期方法区在HotSpot中由永久代（类型信息、字段、方法、常量）和堆（字符串常量池、静态变量）共同实现 jdk1.8及之后 取消永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池、静态变量仍在堆中 这个时期方法区在HotSpot中由本地内存的元空间（类型信息、字段、方法、常量）和堆（字符串常量池、静态变量）共同实现 可变字符串:
StringBuffer
线程不安全
StringBuilder</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/java%E5%9F%BA%E7%A1%80/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/java%E5%9F%BA%E7%A1%80/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>TODO
线程状态
新建: new
就绪: 等待cpu调度 (start方法), Thread.yield() 会让线程从运行状态转换为就绪状态
运行 : running状态 ,Thread.sleep()不会释放线程,只是会释放cpu占用
阻塞: 等待资源
等待 : monitor.wait
终止: stop</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/java%E5%9F%BA%E7%A1%80/%E9%9B%86%E5%90%88/</guid>
      <description> List # 默认大小为10
扩容规则
每次扩容 1.5倍 扩容后任然不够大小,直接使用最小的数据大小 大于最大容量,取最大容量 扩展点
go slice扩容规则
小于1024 ,扩容两倍 double容量不能容纳,直接使用预估的容量 大于1024 ,扩容1.25倍 </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/linux/nvim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/linux/nvim/</guid>
      <description>文件查找: # 查找空间下文件 ff
查到打开的文件 fb
新建termimal # 上线窗口 - h
左右窗口 -vh :</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>dmesg|egrep -i -B100 &amp;lsquo;killed process&amp;rsquo;
lsof
netstat
tcpdump
​</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%85%B6%E4%BB%96/%E5%85%B6%E4%BB%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%85%B6%E4%BB%96/%E5%85%B6%E4%BB%96/</guid>
      <description>java 锁 # 自旋锁 实现cpu空转 会存在超时的情况
ReentrantLock # 可重入锁: 巧用condition
用这个await 、notifyAll 可以实现线程通信,但是出现超时情况
Semaphore # 交替打印:
class FooBar { private int n; Semaphore fooS = new Semaphore(1); Semaphore barS = new Semaphore(0); public FooBar(int n) { this.n = n; } public void foo(Runnable printFoo) throws InterruptedException { for (int i = 0; i &amp;lt; n; i++) { fooS.acquire(); printFoo.run(); barS.release(); } } public void bar(Runnable printBar) throws InterruptedException { for (int i = 0; i &amp;lt; n; i++) { barS.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%85%B6%E4%BB%96/%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%85%B6%E4%BB%96/%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/</guid>
      <description>文件存储 # nfs: network file system , 提供文件挂在功能 ,NFS挂在本地,存在单点问题
GFS: 文件存储,大文件,数据拆分
FastDFS : fast distribute file system, 小文件 ,数据不拆分</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%85%B6%E4%BB%96/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%85%B6%E4%BB%96/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</guid>
      <description>华盛通2023-07-07 一面 # spring中的设计模式 # Aop机制 # 面向切面变成, 基于jdk 动态代理和cglib动态代理实现, 可以为方法指定对应的切面 ,从而动态扩展方法功能 , 比如为远程方法调用增加日志、trace.等
jdk动态代理:运行时动态代理技术, 可以实现对接口的动态代理, 实现对象的invoactionhandler 来扩展原有类中方法的功能, 底层使用代理模式,重新生成一个代理类, 在调用方法之前或者之后 加载invocationhandler里面的扩展方法,只能对方法进行动态代理,
cglib: 编译时字节码增强技术, 可以对字段、类、方法进行字节码增强
spring -aop: 对jdk动态代理、cglib进行包装, 常用的注解, @Aspect 定义切面 , @PointCut 定义切人点 ,切入点即拦截的方法位置 , @Around 、@Before @After 定义Advice 通知, 比如加日志、监控、上报指标等
kafka消息积压如何处理, 加消费者后rebalance如何解决分区重分配问题 # rebalance 无法避免
redis节点挂掉如何处理 # ping消息获取节点信息:
投票过程是集群中所有master参与,如果半数以上master节点与master节点通信超时(cluster-node-timeout),认为当前master节点挂掉。
如果无对应的salve节点, 集群直接不可用
slave 节点发小master节点挂掉后,开始raft 选举, offset 最大的节点优先选举, offset比较小的延迟选举
扩展信息
kafka ​	leader follower 挂掉后也是类似的原则, 由controller节点 , 从AR 副本 (ISR) 中选取一个副本作为leader 副本</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%85%B6%E4%BB%96/%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%85%B6%E4%BB%96/%E7%AE%97%E6%B3%95/</guid>
      <description>1、list
return arr.stream().mapToInt(Integer::valueOf).toArray();
for(Map.Entry&amp;lt;Integer,Integer&amp;gt; ks : m.entrySet()){
​ if(ks.getValue()==maxV){
​ arr.add(ks.getKey());
​ }
​ }
New String(char[], start, size)
int ret = (int)(Math.pow(2,h)) -1; 求2的h次方</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%85%B6%E4%BB%96/%E9%9B%85%E6%80%9D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%85%B6%E4%BB%96/%E9%9B%85%E6%80%9D/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%88%86%E5%B8%83%E5%BC%8F/gossip%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%88%86%E5%B8%83%E5%BC%8F/gossip%E5%8D%8F%E8%AE%AE/</guid>
      <description>NoSQL 数据库 Redis 和 Apache Cassandra、服务网格解决方案 Consul 等知名项目都用到了 Gossip 协议，学习 Gossip 协议有助于我们搞清很多技术的底层原理。
我们这里以 Redis Cluster 为例说明 Gossip 协议的实际应用。
我们经常使用的分布式缓存 Redis 的官方集群解决方案（3.0 版本引入） Redis Cluster 就是基于 Gossip 协议来实现集群中各个节点数据的最终一致性。
有了 Redis Cluster 之后，不需要专门部署 Sentinel 集群服务了。Redis Cluster 相当于是内置了 Sentinel 机制，Redis Cluster 内部的各个 Redis 节点通过 Gossip 协议互相探测健康状态，在故障时可以自动切换。
著作权归Guide所有 原文链接：https://javaguide.cn/distributed-system/protocol/gossip-protocl.html#gossip-%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%88%86%E5%B8%83%E5%BC%8F/nwr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%88%86%E5%B8%83%E5%BC%8F/nwr/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%88%86%E5%B8%83%E5%BC%8F/paxos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%88%86%E5%B8%83%E5%BC%8F/paxos/</guid>
      <description>Basic Paxos 中存在 3 个重要的角色：
提议者（Proposer）：也可以叫做协调者（coordinator），提议者负责接受客户端的请求并发起提案。提案信息通常包括提案编号 (Proposal ID) 和提议的值 (Value)。 接受者（Acceptor）：也可以叫做投票员（voter），负责对提议者的提案进行投票，同时需要记住自己的投票历史； 学习者（Learner）：如果有超过半数接受者就某个提议达成了共识，那么学习者就需要接受这个提议，并就该提议作出运算，然后将运算结果返回给客户端。 为了减少实现该算法所需的节点数，一个节点可以身兼多个角色。并且，一个提案被选定需要被半数以上的 Acceptor 接受。这样的话，Basic Paxos 算法还具备容错性，在少于一半的节点出现故障时，集群仍能正常工作。
Paxos 三种角色:Proposer，Acceptor，Learners # Proposer:
只要 Proposer 发的提案被半数以上 Acceptor 接受，Proposer 就认为该提案里的 value 被选定 了。
Acceptor: 只要 Acceptor 接受了某个提案，Acceptor 就认为该提案里的 value 被选定了。
Learner: Acceptor 告诉 Learner 哪个 value 被选定，Learner 就认为那个 value 被选定。
著作权归Guide所有 原文链接：https://javaguide.cn/distributed-system/protocol/paxos-algorithm.html#%E4%BB%8B%E7%BB%8D</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%88%86%E5%B8%83%E5%BC%8F/zab%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%88%86%E5%B8%83%E5%BC%8F/zab%E5%8D%8F%E8%AE%AE/</guid>
      <description>ZAB( ZooKeeper Atomic Broadcast , ZooKeeper 原子消息广播协议)协议包括两种基本的模 式:崩溃恢复和消息广播 # **1.**崩溃恢复:主要就是 Leader 选举过程
2.**数据同步:Leader 服务器与其他服务器进行数据同步
**3.**消息广播:Leader 服务器将数据发送给其他服务器</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%88%86%E5%B8%83%E5%BC%8F/%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%88%86%E5%B8%83%E5%BC%8F/%E4%BA%8B%E5%8A%A1/</guid>
      <description> TCC事务 # try
confirm
cancel
XA # RM
TM
AP
两阶段提交 # 三阶段提交 # 本地消息表 # 最大努力通知 # SAGA # AT(SEATA) # </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/sql-join/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/sql-join/</guid>
      <description>clickhouse
常用操作
join # 所有的join 操作基本范式都是
​	table1 join table2 on table.xxx=table2.xxx
​	join table3 on table1.xxx=table3.xxx
​	join table4 on table2.xxx=table4.xxx
不允许先查询 再进行join,错误查询示例
select * from table_a where age=12 (inner) join table_b on table_a.id =table_b.id left joni table_c on table a.id=table_c.id where table_a.name=&amp;#39;xxxx&amp;#34; (inner)join操作 # ​	内连接,去两个表on 交集
select * from table_a (inner) join table_b on table_a.id =table_b.id where table_a.name=&amp;#39;&amp;#39;xxxx&amp;#34; ​
Left join # 左边为空时,会导致不会查到任何数据
左连接,取左表所有
select * from table_a left join table_b on table_a.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%B0%83%E4%BC%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%B0%83%E4%BC%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/%E7%89%A9%E5%8C%96%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/%E7%89%A9%E5%8C%96%E8%A7%86%E5%9B%BE/</guid>
      <description>物化视图相关功能</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/clickhosue/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/</guid>
      <description>system.clusters表 # 作用: 查询系统的集群信息
system.query_log # 系统日志:
system.parts # 系统表:根据此表可以查询表的分区信息,以及占用的空间大小
SELECT TABLE, -- 表名 DATABASE, -- 数据库名 max(partition) AS part, -- 最大分区 formatReadableSize(sum(bytes_on_disk)) AS SIZE, -- 磁盘容量 sum(bytes_on_disk) AS size_bytes -- 磁盘容量 FROM system.parts_all GROUP BY TABLE, DATABASE ORDER BY size_bytes DESC system.disks # 查询磁盘使用率
SELECT sum(total_space -free_space)/sum(total_space) AS USAGE, -- 使用率 count(*) , -- 节点数量 formatReadableSize(sum(total_space -free_space)) AS foramat_usage, -- 使用空间大小 formatReadableSize(sum(total_space)) AS format_total --总空间大小 FROM clusterAllReplicas(&amp;#39;clickhouse_pcg_video_data_science_2_replica&amp;#39;,system,disks); 数据导出命令 # mysql -h{host} -u{user}-P{port} -D{db} --password=&amp;#39;{passwod}&amp;#39; -e &amp;#34;sql&amp;#34; &amp;gt; file.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/elasticsearch/%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/elasticsearch/%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/elasticsearch/%E8%B0%83%E4%BC%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/elasticsearch/%E8%B0%83%E4%BC%98/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mvcc%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mvcc%E6%A8%A1%E5%9E%8B/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E4%BA%8B%E5%8A%A1/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E9%94%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/%E9%94%81/</guid>
      <description>概览 # 全局锁 # 示例:
flush tables with read lock --加锁 unlock tables --解锁 用途: 全库备份,期间不允许数据修改
表级别锁 # 1.表锁 # lock tables t_student read; --表级别的共享锁，也就是读锁； unlock tables --解锁 lock tables t_stuent write; -- 表级别的独占锁，也就是写锁； unlock tables --解锁 2.元数据锁 # 再来说说元数据锁（MDL）。
我们不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：
对一张表进行 CRUD 操作时，加的是 MDL 读锁； 对一张表做结构变更操作的时候，加的是 MDL 写锁； MDL 是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。
当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>http://kaito-kidd.com/2021/06/08/is-redis-distributed-lock-really-safe/
redission 实现分布式锁 , 不能解决主从切换问题,
redlock 解决主从切换问题</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description>redis与 db双写一致性问题
先更新redis,后更新数据库 # 先更新数据库,后更新redis # 先删除redis,后更新数据库 # 先更新数据库,后删除redis # </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E6%9E%B6%E6%9E%84/</guid>
      <description>redis 架构 # 持久化方式 # rdb: fork进程
aof: 一个线程,
redis基础数据结构
string类型:SDS ,简单字符串, 获取字符串容量 需要时间o(1), 是安全的,不会造成缓存区溢出
详细: https://www.cnblogs.com/xiaolincoding/p/15628854.html
一致性hash: # 一致哈希 是一种特殊的哈希算法。在使用一致哈希算法后，哈希表槽位数（大小）的改变平均只需要对 K/n 个关键字重新映射，其中 K 是关键字的数量，n 是槽位数量。然而在传统的哈希表中，添加或删除一个槽位的几乎需要对所有关键字进行重新映射。
多级缓存: # 缓存更新、缓存一致性问题
主从复制原理 # 当启动一个 slave node 的时候，它会发送一个 PSYNC 命令给 master node。 如果这是 slave node 初次连接到 master node，那么会触发一次 full resynchronization 全量复制。此时 master 会启动一个后台线程，开始生成一份 RDB 快照文件。 同时还会将从客户端 client 新收到的所有写命令缓存在内存中。RDB 文件生成完毕后， master 会将这个 RDB 发送给 slave，slave 会先写入本地磁盘，然后再从本地磁盘加载到内存中。 接着 master 会将内存中缓存的写命令发送到 slave，slave 也会同步这些数据。 slave node 如果跟 master node 有网络故障，断开了连接，会自动重连，连接之后 master node 仅会复制给 slave 部分缺少的数据。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E4%BF%A1%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%9E%B6%E6%9E%84/%E5%BE%AE%E4%BF%A1%E6%9E%B6%E6%9E%84/</guid>
      <description>微信架构
adfasdf
dfsasdfads</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/</guid>
      <description>TODO
设计思路
全局变量： 保存结果 参数设计： 递归函数的参数，是将上一次操作的合法状态当作下一次操作的初始位置。这里的参数，我理解为两种参数：状态变量和条件变量。（1）状态变量（state）就是最后结果（result）要保存的值；（2）条件变量就是决定搜索是否完毕或者合法的值。 完成条件： 完成条件是决定 状态变量和条件变量 在取什么值时可以判定整个搜索流程结束。搜索流程结束有两种含义： 搜索成功并保存结果 和 搜索失败并返回上一次状态。 递归过程： 传递当前状态给下一次递归进行搜索。 void backtrace(初始数据,中间数据存储, 结果数据 )
结果数据要定义好 初始数据要根据需要取单个值或者原始数组 数组全排列:
https://leetcode.cn/problems/permutations/solution/ newArr:=make([]int,len(arr))
copy(newArr,arr) copy的时候需要指定length和cap
leecode 题目 https://leetcode.cn/problems/combinations/submissions/
func Combine(n int, k int) [][]int { var ret = make([][]int, 0) var backTrace func(start int, num int, retArr *[][]int, temp []int) backTrace = func(start int, num int, retArr *[][]int, temp []int) { if len(temp) == k { *retArr = append(*retArr, temp) return } if start &amp;gt; n { return } //chose i copyTemp := make([]int, len(temp)) copy(copyTemp, temp) temp = append(temp, start) if start == 4 { fmt.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>贪心算法定义</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E7%AE%97%E6%B3%95/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E7%AE%97%E6%B3%95/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/menu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/menu/</guid>
      <description> headless: true # </description>
    </item>
    
  </channel>
</rss>
