<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>其他 on My New Hugo Site</title>
    <link>http://example.org/docs/%E5%85%B6%E4%BB%96/</link>
    <description>Recent content in 其他 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://example.org/docs/%E5%85%B6%E4%BB%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>其他</title>
      <link>http://example.org/docs/%E5%85%B6%E4%BB%96/c%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%85%B6%E4%BB%96/c%E8%AF%AD%E8%A8%80/</guid>
      <description>SOP: 定义: standard operating procedure , 标准操作过程用来提升效率、提高产出
参考:https://en.wikipedia.org/wiki/Standard_operating_procedure
DAU
PV
UV
VV
WAU
SLA
QPS
TPS
PIP performance improvement protocol,绩效提升协议
普适性扩展
Humble 谦逊
BFF Backends for Frontends 的简写，为了前端的后端
WEB
APP
OPEN API
小程序</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%85%B6%E4%BB%96/%E5%85%B6%E4%BB%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%85%B6%E4%BB%96/%E5%85%B6%E4%BB%96/</guid>
      <description>java 锁 # 自旋锁 实现cpu空转 会存在超时的情况
ReentrantLock # 可重入锁: 巧用condition
用这个await 、notifyAll 可以实现线程通信,但是出现超时情况
Semaphore # 交替打印:
class FooBar { private int n; Semaphore fooS = new Semaphore(1); Semaphore barS = new Semaphore(0); public FooBar(int n) { this.n = n; } public void foo(Runnable printFoo) throws InterruptedException { for (int i = 0; i &amp;lt; n; i++) { fooS.acquire(); printFoo.run(); barS.release(); } } public void bar(Runnable printBar) throws InterruptedException { for (int i = 0; i &amp;lt; n; i++) { barS.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%85%B6%E4%BB%96/%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%85%B6%E4%BB%96/%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/</guid>
      <description>文件存储 # nfs: network file system , 提供文件挂在功能 ,NFS挂在本地,存在单点问题
GFS: 文件存储,大文件,数据拆分
FastDFS : fast distribute file system, 小文件 ,数据不拆分</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%85%B6%E4%BB%96/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%85%B6%E4%BB%96/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</guid>
      <description>华盛通2023-07-07 一面 # spring中的设计模式 # Aop机制 # 面向切面变成, 基于jdk 动态代理和cglib动态代理实现, 可以为方法指定对应的切面 ,从而动态扩展方法功能 , 比如为远程方法调用增加日志、trace.等
jdk动态代理:运行时动态代理技术, 可以实现对接口的动态代理, 实现对象的invoactionhandler 来扩展原有类中方法的功能, 底层使用代理模式,重新生成一个代理类, 在调用方法之前或者之后 加载invocationhandler里面的扩展方法,只能对方法进行动态代理,
cglib: 编译时字节码增强技术, 可以对字段、类、方法进行字节码增强
spring -aop: 对jdk动态代理、cglib进行包装, 常用的注解, @Aspect 定义切面 , @PointCut 定义切人点 ,切入点即拦截的方法位置 , @Around 、@Before @After 定义Advice 通知, 比如加日志、监控、上报指标等
kafka消息积压如何处理, 加消费者后rebalance如何解决分区重分配问题 # rebalance 无法避免
redis节点挂掉如何处理 # ping消息获取节点信息:
投票过程是集群中所有master参与,如果半数以上master节点与master节点通信超时(cluster-node-timeout),认为当前master节点挂掉。
如果无对应的salve节点, 集群直接不可用
slave 节点发小master节点挂掉后,开始raft 选举, offset 最大的节点优先选举, offset比较小的延迟选举
扩展信息
kafka ​	leader follower 挂掉后也是类似的原则, 由controller节点 , 从AR 副本 (ISR) 中选取一个副本作为leader 副本</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%85%B6%E4%BB%96/%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%85%B6%E4%BB%96/%E7%AE%97%E6%B3%95/</guid>
      <description>1、list
return arr.stream().mapToInt(Integer::valueOf).toArray();
for(Map.Entry&amp;lt;Integer,Integer&amp;gt; ks : m.entrySet()){
​ if(ks.getValue()==maxV){
​ arr.add(ks.getKey());
​ }
​ }
New String(char[], start, size)
int ret = (int)(Math.pow(2,h)) -1; 求2的h次方</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E5%85%B6%E4%BB%96/%E9%9B%85%E6%80%9D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E5%85%B6%E4%BB%96/%E9%9B%85%E6%80%9D/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
