<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on My New Hugo Site</title>
    <link>http://example.org/docs/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://example.org/docs/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://example.org/docs/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E7%AE%97%E6%B3%95/%E5%9B%9E%E6%BA%AF/</guid>
      <description>TODO
设计思路
全局变量： 保存结果 参数设计： 递归函数的参数，是将上一次操作的合法状态当作下一次操作的初始位置。这里的参数，我理解为两种参数：状态变量和条件变量。（1）状态变量（state）就是最后结果（result）要保存的值；（2）条件变量就是决定搜索是否完毕或者合法的值。 完成条件： 完成条件是决定 状态变量和条件变量 在取什么值时可以判定整个搜索流程结束。搜索流程结束有两种含义： 搜索成功并保存结果 和 搜索失败并返回上一次状态。 递归过程： 传递当前状态给下一次递归进行搜索。 void backtrace(初始数据,中间数据存储, 结果数据 )
结果数据要定义好 初始数据要根据需要取单个值或者原始数组 数组全排列:
https://leetcode.cn/problems/permutations/solution/ newArr:=make([]int,len(arr))
copy(newArr,arr) copy的时候需要指定length和cap
leecode 题目 https://leetcode.cn/problems/combinations/submissions/
func Combine(n int, k int) [][]int { var ret = make([][]int, 0) var backTrace func(start int, num int, retArr *[][]int, temp []int) backTrace = func(start int, num int, retArr *[][]int, temp []int) { if len(temp) == k { *retArr = append(*retArr, temp) return } if start &amp;gt; n { return } //chose i copyTemp := make([]int, len(temp)) copy(copyTemp, temp) temp = append(temp, start) if start == 4 { fmt.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</guid>
      <description>贪心算法定义</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E7%AE%97%E6%B3%95/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E7%AE%97%E6%B3%95/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
