<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>redis on My New Hugo Site</title>
    <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/</link>
    <description>Recent content in redis on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>http://kaito-kidd.com/2021/06/08/is-redis-distributed-lock-really-safe/
redission 实现分布式锁 , 不能解决主从切换问题,
redlock 解决主从切换问题</description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7/</guid>
      <description>redis与 db双写一致性问题
先更新redis,后更新数据库 # 先更新数据库,后更新redis # 先删除redis,后更新数据库 # 先更新数据库,后删除redis # </description>
    </item>
    
    <item>
      <title></title>
      <link>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/%E6%9E%B6%E6%9E%84/</guid>
      <description>redis 架构 # 持久化方式 # rdb: fork进程
aof: 一个线程,
redis基础数据结构
string类型:SDS ,简单字符串, 获取字符串容量 需要时间o(1), 是安全的,不会造成缓存区溢出
详细: https://www.cnblogs.com/xiaolincoding/p/15628854.html
一致性hash: # 一致哈希 是一种特殊的哈希算法。在使用一致哈希算法后，哈希表槽位数（大小）的改变平均只需要对 K/n 个关键字重新映射，其中 K 是关键字的数量，n 是槽位数量。然而在传统的哈希表中，添加或删除一个槽位的几乎需要对所有关键字进行重新映射。
多级缓存: # 缓存更新、缓存一致性问题
主从复制原理 # 当启动一个 slave node 的时候，它会发送一个 PSYNC 命令给 master node。 如果这是 slave node 初次连接到 master node，那么会触发一次 full resynchronization 全量复制。此时 master 会启动一个后台线程，开始生成一份 RDB 快照文件。 同时还会将从客户端 client 新收到的所有写命令缓存在内存中。RDB 文件生成完毕后， master 会将这个 RDB 发送给 slave，slave 会先写入本地磁盘，然后再从本地磁盘加载到内存中。 接着 master 会将内存中缓存的写命令发送到 slave，slave 也会同步这些数据。 slave node 如果跟 master node 有网络故障，断开了连接，会自动重连，连接之后 master node 仅会复制给 slave 部分缺少的数据。</description>
    </item>
    
  </channel>
</rss>
